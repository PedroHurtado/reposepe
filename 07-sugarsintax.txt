https://developer.mozilla.org/es/docs/Glossary/Polyfill
https://www.npmjs.com/package/core-js

1. Rest Parameters
    function sum(...args){
        return args.reduce((a,v)=>a+v)
    }

restricciones
    1. solo puede haber 1
    2. debe de ser el ultimo argumento de la funcion

    sum(...args,acumulado) //error
    sum(acumulado,...args) //error

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters

2. Default Parameters

    function sum(a,b=4){

    }

    sum(3) //7
    sum(3,5) //8

    restricciones

    1. Tienen que ser los ultimos de los argumentos

    sum(a=4,b){  //error

    }

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters

3. Desectructuracion
    const [a,b] = [1,2,3]

    a->1
    b->2

    const [a,b,...rest] = [1,2,3,4,5,6]

    a->1
    b->2
    rest = [3,4,5,6]

    const {id,name} = {id:1,name:'pedro', phone:453453453}

    id->1
    name->'pedro'

    const {id,name,...rest} = {id:1,name:'pedro', phone:453453453}

    id->1
    name->'pedro'
    rest->{phone:453453453}

    function foo({id,name}){

    }

    foo({id:1,name:'pedro', phone:453453453})

    https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment

   const foo = {
    x:1,
    write:function(){
        console.log(this.x)
    }
   }

   const {id,write} = foo //perdida de ambito
   write() // undefined

   4. Spread Operators
    
     const a = [1,2,3]
     const b=[4.,5,6]
     const c = [...a,...b] //concatena los valores
     [1,2,3,4,5,6]

     const foo = {id:1,name:'pedro}
     const bar = {name:'pedro hurtado'}

     const result = {...foo,...bar}

     {id:1,name:'pedro hurtado'}

     https://developer.mozilla.org/en-US/docs/Web/API/structuredClone
     https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
5. Operador de cortocircuito

    if(a){
        a()
    }

    a && a();

    const bar = undefined || {}

    function foo(options){
        options = options || {}
    }

    foo() options->{}
    foo({id:1}) ->{id:1}

6. Optional Chaining

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Conditional_operator
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing