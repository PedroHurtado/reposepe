1. Cuando asignamos una function a una variable

window.x=10
window.foo={
    x:11,
    write:function(){
        console.log(this.x)
    }
}

window.foo.write() //11
window.write = window.foo.write.bind(window.foo);
window.write() //10

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind

2. Cuando pasamos una function a otra function como argumento

class Bar{
    constructor(writer){
        writer();  // undefined
        this.writer = writer
        this.writer(); //Bar
    }
}

class Foo{
  constructor(){
    //new Bar(this.writer.bind(this)) (1)
    new Bar(()=>this.writer()) //No(2)
  }
  writer(){
    console.log(this)
  }   
}

https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Functions/Arrow_functions

call y apply

const bar = {}
function foo(name){
    this.name = name
}
foo.call(bar,"Pedro")

https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/call

1. argumento es el this
2. argumento es el argumento de la function

const bar = {}
function foo(name){
    this.name = name
}
foo.apply(bar,["Pedro"])

//https://developer.mozilla.org/es/docs/Web/JavaScript/Reference/Global_Objects/Function/apply